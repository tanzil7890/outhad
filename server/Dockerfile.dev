# syntax = docker/dockerfile:1

# Make sure RUBY_VERSION matches the Ruby version in .ruby-version and Gemfile

ARG RUBY_VERSION=3.2.4
FROM registry.docker.com/library/ruby:$RUBY_VERSION-slim as base

# Install packages needed for building, including Libtool
RUN apt-get update -qq && \
    apt-get install --no-install-recommends -y build-essential autoconf automake libtool git libpq-dev libvips pkg-config m4 perl libltdl-dev curl git wget unzip default-libmysqlclient-dev

# Copy and run the Oracle Instant Client installation script
COPY getoracleinstantclient.sh .
RUN chmod +x getoracleinstantclient.sh && ./getoracleinstantclient.sh

COPY getduckdb.sh .
COPY gethttpfsextension.sh .

# Make the scripts executable
RUN chmod +x getduckdb.sh gethttpfsextension.sh

# Unzip and move DuckDB files
RUN ./getduckdb.sh
RUN unzip duckdb.zip -d libduckdb
RUN mv libduckdb/duckdb.* /usr/local/include
RUN mv libduckdb/libduckdb.so /usr/local/lib

RUN ldconfig /usr/local/lib

WORKDIR /rails

# Set environment variables for development
ENV BUNDLE_DEPLOYMENT=0
ENV BUNDLE_WITHOUT=''
ENV BUNDLE_PATH=/usr/local/bundle
ENV RAILS_ENV=development

# Throw-away build stage to reduce size of final image
FROM base AS build
# Install packages needed for building, including Libtool
RUN apt-get update -qq && \
    apt-get install --no-install-recommends -y build-essential autoconf automake libtool git libpq-dev libvips pkg-config m4 perl libltdl-dev

# # Navigate to the directory of the component you want to build
WORKDIR /

# Clone the repository
RUN git clone https://github.com/Outhad-Search/outhad-dependencies.git outhad-dependencies

WORKDIR /outhad-dependencies/unixODBC-2.3.11

# Run autoreconf
RUN autoreconf -f -i

# Run configure and make install
RUN ./configure && \
    make && \
    make install

# Install iodbc
RUN apt-get update -qq && \
    apt-get install -y libiodbc2 && \
    rm -rf /var/lib/apt/lists/*

# Hack for snowflake odbc driver
RUN apt-get update -qq && \
    apt-get install -y unixodbc && \
    rm -rf /var/lib/apt/lists/*

RUN apt-get update -qq && \
    apt-get install -y --no-install-recommends wget && \
    rm -rf /var/lib/apt/lists/*


# Install the Snowflake ODBC driver
ENV LD_LIBRARY_PATH=/usr/local/lib
ARG TARGETARCH=amd64

RUN if [ "$TARGETARCH" = "amd64" ] || [ "$TARGETARCH" = "x86_64" ]; then \
    wget https://sfc-repo.snowflakecomputing.com/odbc/linux/latest/snowflake-odbc-3.2.0.x86_64.deb -O snowflake-odbc.deb && \
    dpkg -i snowflake-odbc.deb || apt-get -y -f install; \
    elif [ "$TARGETARCH" = "arm64" ] || [ "$TARGETARCH" = "aarch64" ]; then \
    wget https://sfc-repo.snowflakecomputing.com/odbc/linuxaarch64/3.2.0/snowflake-odbc-3.2.0.aarch64.deb -O snowflake-odbc.deb && \
    dpkg -i snowflake-odbc.deb || apt-get -y -f install; \
    else \
    echo "Unsupported architecture: $TARGETARCH" >&2; \
    exit 1; \
    fi

RUN apt-get update -qq && \
    apt-get install -y unzip 

RUN apt-get update -qq && \
    apt-get install -y libsasl2-modules-gssapi-mit

RUN if [ "$TARGETARCH" = "amd64" ] || [ "$TARGETARCH" = "x86_64" ]; then \
    wget --quiet https://databricks-bi-artifacts.s3.us-east-2.amazonaws.com/simbaspark-drivers/odbc/2.7.7/SimbaSparkODBC-2.7.7.1016-Debian-64bit.zip -O /tmp/databricks_odbc.zip && \
    unzip /tmp/databricks_odbc.zip -d /tmp && \
    dpkg -i /tmp/simbaspark_*.deb && \
    rm -rf /tmp/*; \
    fi
#ARM64 version of the Simba Spark ODBC driver is not currently available,

# Change back to the root directory before copying the Rails app
# Rails app lives here
WORKDIR /rails

# Install application gems
COPY Gemfile ./
COPY Gemfile.lock* ./
COPY bin/dev-entrypoint ./bin/dev-entrypoint
RUN bundle config build.duckdb --with-duckdb-lib=/usr/local/lib --with-duckdb-include=/usr/local/include && \
    bundle install && \
    chmod +x ./bin/dev-entrypoint

# Install packages needed for deployment
RUN apt-get update -qq && \
    apt-get install --no-install-recommends -y curl libvips postgresql-client && \
    rm -rf /var/lib/apt/lists /var/cache/apt/archives

# Copy extension script to the build stage
COPY gethttpfsextension.sh .
RUN chmod +x gethttpfsextension.sh

# Create user and directories for development
RUN useradd rails --create-home --shell /bin/bash && \
    mkdir -p /rails/db /rails/log /rails/storage /rails/tmp /rails/bin && \
    ./gethttpfsextension.sh && \
    chown -R rails:rails /rails /home/rails/.duckdb /usr/local/bundle

# Switch to rails user
USER rails:rails

# Set development entrypoint
ENTRYPOINT ["/rails/bin/dev-entrypoint"]

# Start the server by default, this can be overwritten at runtime
EXPOSE 3000
CMD ["bundle", "exec", "rails", "server", "-b", "0.0.0.0", "-p", "3000"]